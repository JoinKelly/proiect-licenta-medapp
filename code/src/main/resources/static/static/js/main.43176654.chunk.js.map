{"version":3,"sources":["services/apiClient.js","services/localStorageManager.js","components/sidebar-items.js","services/sessionManager.js","components/LoginForm.js","components/NonLoggedIn.js","components/AdminUsers.js","components/Logout.js","components/LoggedIn.js","components/SidebarItem.js","components/Sidebar.js","Main.js","serviceWorker.js","index.js"],"names":["baseUrl","process","BASE_URL","ApiClient","loginFetch","email","password","loginBody","fetch","concat","headers","Content-Type","method","body","JSON","stringify","then","data","json","lsm","localStorage","sidebar_items","admin","defaultUrl","prefix","items","src","title","doctor","nurse","SessionManager","stringToObject","input","parse","objectToString","isSessionValid","hasUserSession","undefined","getUserSession","arguments","length","getItem","setUserSession","session","setItem","expireSession","Object","assign","objectSpread","expirationDate","clearSession","removeItem","getUserProperty","property","hasPermisionForUrl","pathname","userRole","hasPermissions","_sidebarItems$userRol","sidebarItems","forEach","item","LoginForm","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","event","setState","defineProperty","target","id","value","validateForm","state","handleSubmit","preventDefault","window","location","replace","react_default","a","createElement","className","onSubmit","type","required","onChange","placeholder","disabled","onClick","Component","NonLoggedIn","react","components_LoginForm","AdminUsers","autoComplete","readOnly","defaultValue","Logout","LoggedIn","accountType","Redirect","to","Route","exact","path","component","withRouter","SidebarItem","href","Sidebar","_sidebarItems$account","map","components_SidebarItem","key","Main","BrowserRouter","Sidebar_Sidebar","components_LoggedIn","components_NonLoggedIn","Boolean","hostname","match","ReactDOM","render","src_Main","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.43176654.chunk.js","sourcesContent":["// import SessionManager from \"./sessionManager\";\r\n\r\nconst baseUrl = process.env.BASE_URL || \"http://localhost:8080\";\r\n\r\nclass ApiClient {\r\n  static loginFetch = (email, password) => {\r\n    const loginBody = {\r\n      email,\r\n      password\r\n    };\r\n\r\n    return fetch(`${baseUrl}/api/auth`, {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\"\r\n      },\r\n      method: \"POST\",\r\n      body: JSON.stringify(loginBody)\r\n    }).then(data => data.json());\r\n  };\r\n}\r\n\r\nexport default ApiClient;\r\n","let lsm = localStorage;\r\nexport default lsm;\r\n","export default {\r\n  admin: {\r\n    defaultUrl: \"/admin/users\",\r\n    prefix: \"/admin\",\r\n    items: [\r\n      {\r\n        src: \"/users\",\r\n        title: \"Users\"\r\n      }\r\n    ]\r\n  },\r\n\r\n  doctor: {\r\n    defaultUrl: \"/app/appointments\",\r\n    prefix: \"/app\",\r\n    items: [\r\n      {\r\n        src: \"/patients\",\r\n        title: \"Patients\"\r\n      },\r\n      {\r\n        src: \"/diagnoses\",\r\n        title: \"Diagnoses\"\r\n      },\r\n      {\r\n        src: \"/appointments\",\r\n        title: \"Appointments\"\r\n      }\r\n    ]\r\n  },\r\n\r\n  nurse: {\r\n    defaultUrl: \"/app/appointments\",\r\n    prefix: \"/app\",\r\n    items: [\r\n      {\r\n        src: \"/appointments\",\r\n        title: \"Appointments\"\r\n      },\r\n      {\r\n        src: \"/patients\",\r\n        title: \"Patients\"\r\n      }\r\n    ]\r\n  }\r\n};\r\n","import lsm from \"./localStorageManager\";\r\nimport sidebarItems from \"../components/sidebar-items\";\r\n\r\nconst sessionKey = \"userSession\";\r\n\r\nclass SessionManager {\r\n  static stringToObject = input => {\r\n    return JSON.parse(input);\r\n  };\r\n\r\n  static objectToString = input => {\r\n    return JSON.stringify(input);\r\n  };\r\n\r\n  static isSessionValid = () => {\r\n    if (!SessionManager.hasUserSession()) return false;\r\n  };\r\n\r\n  static hasUserSession = () =>\r\n    SessionManager.getUserSession() !== undefined &&\r\n    SessionManager.getUserSession() !== null;\r\n\r\n  static getUserSession = (stringify = false) => {\r\n    if (stringify) return lsm.getItem(sessionKey);\r\n    return SessionManager.stringToObject(lsm.getItem(sessionKey));\r\n  };\r\n\r\n  static setUserSession = session => {\r\n    lsm.setItem(sessionKey, SessionManager.objectToString(session));\r\n  };\r\n\r\n  static expireSession = () => {\r\n    const session = SessionManager.getUserSession();\r\n    Object.assign(session, {\r\n      ...session,\r\n      expirationDate: 0\r\n    });\r\n    SessionManager.setUserSession(session);\r\n  };\r\n\r\n  static clearSession = () => {\r\n    lsm.removeItem(sessionKey);\r\n  };\r\n\r\n  static getUserProperty = property => {\r\n    return SessionManager.stringToObject(lsm.getItem(sessionKey))[property];\r\n  };\r\n\r\n  static hasPermisionForUrl = pathname => {\r\n    const userRole = SessionManager.getUserProperty(\"userRole\");\r\n    let hasPermissions = false;\r\n    const { prefix, items } = sidebarItems[userRole];\r\n    items.forEach(item => {\r\n      if (`${prefix}${item.src}` === pathname) hasPermissions = true;\r\n    });\r\n    return hasPermissions;\r\n  };\r\n}\r\n\r\nexport default SessionManager;\r\n","import React, { Component } from \"react\";\r\nimport ApiClient from \"../services/apiClient\";\r\nimport SessionManager from \"../services/sessionManager\";\r\nimport sidebarItems from \"./sidebar-items\";\r\n\r\nclass LoginForm extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      email: \"\",\r\n      password: \"\"\r\n    };\r\n  }\r\n\r\n  handleChange = event => {\r\n    this.setState({\r\n      [event.target.id]: event.target.value\r\n    });\r\n  };\r\n\r\n  validateForm = () => {\r\n    return this.state.email.length > 0 && this.state.password.length > 0;\r\n  };\r\n\r\n  handleSubmit = event => {\r\n    event.preventDefault();\r\n    ApiClient.loginFetch(this.state.email, this.state.password).then(data => {\r\n      SessionManager.setUserSession(data);\r\n      window.location.replace(sidebarItems[data.userRole].defaultUrl);\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"LoginForm\">\r\n        <form onSubmit={this.handleSubmit} className=\"text-center\">\r\n          <div className=\"form-group mb-4\">\r\n            <input\r\n              type=\"email\"\r\n              className=\"form-control\"\r\n              required\r\n              onChange={this.handleChange}\r\n              id=\"email\"\r\n              placeholder=\"Email address\"\r\n            />\r\n          </div>\r\n          <div className=\"form-group mb-4\">\r\n            <input\r\n              type=\"password\"\r\n              className=\"form-control\"\r\n              required\r\n              onChange={this.handleChange}\r\n              id=\"password\"\r\n              placeholder=\"Password\"\r\n            />\r\n          </div>\r\n          <button\r\n            type=\"submit\"\r\n            disabled={!this.validateForm()}\r\n            onClick={this.handleSubmit}\r\n            className=\"btn btn-primary  center-block\"\r\n          >\r\n            Login\r\n          </button>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default LoginForm;\r\n","import React, { Component, Fragment } from \"react\";\r\nimport LoginForm from \"./LoginForm\";\r\n\r\nclass NonLoggedIn extends Component {\r\n  render() {\r\n    return (\r\n      <Fragment>\r\n        <h1 className=\"medapp-title text-center\">Med App</h1>\r\n        <h4 className=\"medapp-subtitle text-center\">\r\n          Enter your credentials in order to continue.\r\n        </h4>\r\n        <LoginForm />\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NonLoggedIn;\r\n","import React, { Component } from \"react\";\r\n// import Sidebar from \"./Sidebar\";\r\n\r\nexport default class AdminUsers extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"container-fluid\">\r\n        <div className=\"row\">\r\n          <div className=\"col-lg-12 h1 text-dark mt-3\">Users Management</div>\r\n          <div className=\"col-lg-12 lead text-muted mb-5\">\r\n            Create, Update & Delete users\r\n          </div>\r\n          <div className=\"col-lg-6 col-md-6 col-sm-12\">\r\n            <form>\r\n              <div className=\"form-group p-1\">\r\n                <input\r\n                  type=\"text\"\r\n                  className=\"form-control p-1\"\r\n                  id=\"form_create-user_first-name\"\r\n                  placeholder=\"First Name\"\r\n                />\r\n              </div>\r\n              <div className=\"form-group p-1\">\r\n                <input\r\n                  type=\"text\"\r\n                  className=\"form-control\"\r\n                  id=\"form_create-user_last-name\"\r\n                  placeholder=\"Last Name\"\r\n                />\r\n              </div>\r\n              <div className=\"form-group p-1\">\r\n                <input\r\n                  type=\"text\"\r\n                  className=\"form-control\"\r\n                  id=\"form_create-user_username\"\r\n                  placeholder=\"Username\"\r\n                />\r\n              </div>\r\n              <div className=\"form-group p-1\">\r\n                <input\r\n                  type=\"password\"\r\n                  className=\"form-control\"\r\n                  id=\"form_create-user_password\"\r\n                  autoComplete={false}\r\n                  readOnly\r\n                  placeholder=\"Password is automatically generated\"\r\n                />\r\n              </div>\r\n              <div className=\"form-group p-1\">\r\n                <input\r\n                  type=\"email\"\r\n                  className=\"form-control\"\r\n                  id=\"form_create-user_email\"\r\n                  placeholder=\"Email\"\r\n                />\r\n              </div>\r\n              <div className=\"form-group p-1\">\r\n                <select\r\n                  className=\"form-control\"\r\n                  id=\"form_create-user_role\"\r\n                  placeholder=\"Role\"\r\n                  defaultValue=\"Rode\"\r\n                >\r\n                  <option value={null}>Role</option>\r\n                  <option value=\"admin\">Admin</option>\r\n                  <option value=\"doctor\">Doctor</option>\r\n                  <option value=\"nurse\">Nurse</option>\r\n                </select>\r\n              </div>\r\n            </form>\r\n          </div>\r\n          <div className=\"col-lg-6 col-md-6 col-sm-12\">admin right</div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import SessionManager from \"../services/sessionManager\";\r\n\r\nexport default function Logout() {\r\n  SessionManager.clearSession();\r\n  window.location.replace(\"/\");\r\n  return null;\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { Route, withRouter, Redirect } from \"react-router-dom\";\r\nimport AdminUsers from \"./AdminUsers\";\r\nimport sidebarItems from \"./sidebar-items\";\r\nimport SessionManager from \"../services/sessionManager\";\r\nimport Logout from \"./Logout\";\r\n\r\nclass LoggedIn extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.accountType = SessionManager.getUserProperty(\"userRole\");\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n        {!SessionManager.hasPermisionForUrl(window.location.pathname) ? (\r\n          <Redirect to={sidebarItems[this.accountType].defaultUrl} />\r\n        ) : null}\r\n        {!SessionManager.hasUserSession() ? window.location.replace(\"/\") : null}\r\n        <Route exact path=\"/admin/users\" component={AdminUsers} />\r\n        <Route\r\n          exact\r\n          path=\"/app/appointments\"\r\n          component={() => <div>Appoinments</div>}\r\n        />\r\n        <Route\r\n          exact\r\n          path=\"/app/patients\"\r\n          component={() => <div>Patients</div>}\r\n        />\r\n        <Route\r\n          exact\r\n          path=\"/app/diagnoses\"\r\n          component={() => <div>Diagnoses</div>}\r\n        />\r\n        <Route exact path=\"/logout\" component={Logout} />\r\n        {/* <Route exact path=\"/presence\" component={info} /> */}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withRouter(LoggedIn);\r\n","import React from \"react\";\r\n\r\nfunction SidebarItem(props) {\r\n  return (\r\n    <li className=\"nav-item\">\r\n      <a className=\"nav-link active\" href={props.href}>\r\n        {props.title}\r\n      </a>\r\n    </li>\r\n  );\r\n}\r\n\r\nexport default SidebarItem;\r\n","import React, { Component } from \"react\";\r\nimport sidebarItems from \"./sidebar-items\";\r\nimport SidebarItem from \"./SidebarItem\";\r\n\r\nexport default class Sidebar extends Component {\r\n  render() {\r\n    const { accountType } = this.props;\r\n    const { prefix, items } = sidebarItems[accountType];\r\n    return (\r\n      <div className=\"col-md-2 d-none d-md-block sidebar\">\r\n        <div className=\"logo\">❤ Med App</div>\r\n        <ul className=\"nav flex-column\">\r\n          {items.map(item => (\r\n            <SidebarItem\r\n              title={item.title}\r\n              href={`${prefix}${item.src}`}\r\n              key={item.title}\r\n            />\r\n          ))}\r\n        </ul>\r\n        <div className=\"sign-out-container\">\r\n          <div className=\"sign-out nav flex-column\">\r\n            <a className=\"nav-link active\" href=\"/logout\">\r\n              Sign out\r\n            </a>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport \"./styles/Main.scss\";\nimport NonLoggedIn from \"./components/NonLoggedIn\";\nimport SessionManager from \"./services/sessionManager\";\nimport LoggedIn from \"./components/LoggedIn\";\nimport Sidebar from \"./components/Sidebar\";\n\nclass Main extends Component {\n  componentWillMount() {\n    if (!SessionManager.hasUserSession() && window.location.pathname !== \"/\")\n      window.location.replace(\"/\");\n  }\n  render() {\n    return (\n      <Router>\n        <div className=\"container-fluid\">\n          <div className=\"row\">\n            {SessionManager.hasUserSession() && (\n              <Sidebar\n                accountType={SessionManager.getUserProperty(\"userRole\")}\n              />\n            )}\n            <div\n              className={\n                (SessionManager.hasUserSession()\n                  ? \"col-md-9 col-lg-10\"\n                  : \"col-md-12 col-lg-12\") + \" ml-sm-auto px-4\"\n              }\n            >\n              {SessionManager.hasUserSession() ? <LoggedIn /> : <NonLoggedIn />}\n            </div>\n          </div>\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default Main;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap';\nimport './styles/index.scss';\nimport Main from './Main';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Main />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}